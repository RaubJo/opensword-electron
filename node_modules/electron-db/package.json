{
  "_from": "electron-db",
  "_id": "electron-db@0.7.1",
  "_inBundle": false,
  "_integrity": "sha1-NW4RBeIC3iNOdVtnI/fQInI/WhA=",
  "_location": "/electron-db",
  "_phantomChildren": {
    "graceful-fs": "4.1.11"
  },
  "_requested": {
    "escapedName": "electron-db",
    "fetchSpec": "latest",
    "name": "electron-db",
    "raw": "electron-db",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/electron-db/-/electron-db-0.7.1.tgz",
  "_shasum": "356e1105e202de234e755b6723f7d022723f5a10",
  "_spec": "electron-db",
  "_where": "/home/jackle/workspace/electron/Open-Sword",
  "author": {
    "email": "alexius.academia@gmail.com",
    "name": "Alexius Academia",
    "url": "https://alexiusacademia.com"
  },
  "bugs": {
    "url": "https://github.com/alexiusacademia/electron-db/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "jsonfile": "^4.0.0"
  },
  "deprecated": false,
  "description": "Electron module that simulates database table operations which really just uses json file to store tables in the Application Folder.",
  "devDependencies": {},
  "homepage": "https://github.com/alexiusacademia/electron-db#readme",
  "keywords": [
    "database",
    "electron",
    "json database",
    "json table"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "electron-db",
  "optionalDependencies": {},
  "readme": "# electron-db\n---\n\n> Database-like solution in electron apps\n\n**electron-db** is a module to have a database-like functions to simulate table manipulation on data. The data is saved as a json flat file.\n\nThe json file is saved on the application folder. \n\n**Important:** The script that uses this library should be run with electron command first in order to create the direction on the user data folder. The name that will be used for the app directory will be what was indicated in the package.json as <em>productName</em>. If this is not set, the <em>name</em> property will be used.\n\n[![Build Status](https://travis-ci.org/alexiusacademia/electron-db.svg?branch=master)](https://travis-ci.org/alexiusacademia/electron-db)\n\n### **Installation**\n\n\n```javascript\nnpm install electron-db\n```\n\n### **Creating Table**\nCreates a json file [table-name].js inside the application userData folder.\n\n```javascript\n\nconst db = require('electron-db');\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\ndb.createTable('customers', (succ, msg) => {\n  // succ - boolean, tells if the call is successful\n  console.log(\"Success: \" + succ);\n  console.log(\"Message: \" + msg);\n})\n\n/*\n\tOutput:\n    \tSuccess: true\n        Message: Success!\n        \n\tResult file (customers.json):\n    {\n    \t\"customers\": []\n    }\n*/\n```\n### **Inserting Object/Data to Table**\nInsert an object into the list of row/data of the table.\n\n```javascript\nconst db = require('electron-db');\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\nlet obj = new Object();\n\nobj.name = \"Alexius Academia\";\nobj.address = \"Paco, Botolan, Zambales\";\n\ndb.insertTableContent('customers', obj, (succ, msg) => {\n  // succ - boolean, tells if the call is successful\n  console.log(\"Success: \" + succ);\n  console.log(\"Message: \" + msg);\n})\n\n/*\n\tOutput:\n    \tSuccess: true\n        Message: Object written successfully!\n       \n    Result file (customers.json):\n    {\n      \"customers\": [\n        {\n          \"name\": \"Alexius Academia\",\n          \"address\": \"Paco, Botolan, Zambales\"\n        }\n      ]\n    }\n\n*/\n```\n### **Get all rows**\nGet all the rows for a given table by using the callback function.\n```javascript\n\nconst db = require('electron-db');\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\ndb.getAll('customers', (succ, data)) {\n  // succ - boolean, tells if the call is successful\n  // data - array of objects that represents the rows.\n}\n```\n### **Get Row(s) from the table**\nGet row or rows that matched the given condition(s) in WHERE argument\n\n```javascript\nconst db = require('electron-db');\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\ndb.getRows('customers', {\n  address: \"Paco, Botolan, Zambales\",\n  name: 'Alexius Academia'\n}, (succ, result) => {\n  // succ - boolean, tells if the call is successful\n  console.log(\"Success: \" + succ);\n  console.log(result);\n})\n\n/*\n\tOutput:\n    \tSuccess: true\n        [ { name: 'Alexius Academia',\n    address: 'Paco, Botolan, Zambales',\n    id: 1508419374272 } ]\n*/\n```\n\n### **Update Row**\nUpdates a specific row or rows from a table/json file using a WHERE clause.\n\n```javascript\nconst db = require('electron-db');\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\nlet where = {\n  \"name\": \"Alexius Academia\"\n};\n\nlet set = {\n  \"address\": \"Paco, Botolan, Zambales\"\n}\n\ndb.updateRow('customers', where, set, (succ, msg) => {\n  // succ - boolean, tells if the call is successful\n  console.log(\"Success: \" + succ);\n  console.log(\"Message: \" + msg);\n});\n```\n\n### **Search Records**\nSearch a specific record with a given key/field of the table. This method can search part of a string from a value.\n\nIn this example, I have a table named 'customers', each row has a 'name' property. We are now trying to search for a name in the rows that has the substring 'oh' in it.\n\n```javascript\nconst db = require('electron-db');\nconst electron = require('electron');\n\nconst app = electron.app || electron.remote.app;\n\nlet term = \"oh\";\n\ndb.search('customers', 'name', term, (succ, data) => {\n  if (succ) {\n    console.log(data);\n  }\n});\n\n// Output\n/*\n[ { name: 'John John Academia',\n    address: 'Paco, Botolan, Zambales',\n    id: 1508419430491 } ]\n*/\n```\n\n### **Delete Records**\nDelete a scecific record with a given key-value pair from the table.\n\n```javascript\n\nconst db = require('electron-db');\nconst electron = require('electron');\n\ndb.deleteRow('customers', {'id': 1508419374272}, (succ, msg) => {\n  console.log(msg);\n});\n\n```",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alexiusacademia/electron-db.git"
  },
  "scripts": {
    "start": "node index.js",
    "test": "node test.js"
  },
  "version": "0.7.1"
}
