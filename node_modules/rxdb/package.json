{
  "_from": "rxdb",
  "_id": "rxdb@7.3.1",
  "_inBundle": false,
  "_integrity": "sha512-fqkK2GZRzvFanKJ8AuFANk+1GLtwoxASMPer6LCLGHW2eIrx8/sNcYuaeN+WZCLQmJC2xFAxXz3IPBcRYauDEg==",
  "_location": "/rxdb",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "rxdb",
    "fetchSpec": "latest",
    "name": "rxdb",
    "raw": "rxdb",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/rxdb/-/rxdb-7.3.1.tgz",
  "_shasum": "29a7b92416db9b155ffb0e8a40591b575b61a34e",
  "_spec": "rxdb",
  "_where": "/home/jackle/workspace/electron/Open-Sword",
  "author": {
    "name": "pubkey"
  },
  "bugs": {
    "url": "https://github.com/pubkey/rxdb/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@types/core-js": "0.9.44",
    "babel-runtime": "^6.26.0",
    "clone": "^2.1.1",
    "crypto-js": "^3.1.8",
    "custom-idle-queue": "2.0.0",
    "deep-equal": "^1.0.1",
    "is-my-json-valid": "2.17.1",
    "modifyjs": "0.3.1",
    "object-path": "0.11.4",
    "pouchdb-core": "6.4.1",
    "pouchdb-find": "6.4.1",
    "pouchdb-replication": "6.4.1",
    "pouchdb-selector-core": "6.4.1",
    "random-token": "0.0.8",
    "spark-md5": "^3.0.0",
    "unload": "1.3.6",
    "url": "^0.11.0"
  },
  "deprecated": false,
  "description": "Offline-first database with Reactive, Sync, Schema, Promises, Mongo-Query, Encryption, LevelDown",
  "devDependencies": {
    "@types/pouchdb-adapter-memory": "6.1.2",
    "assert": "1.4.1",
    "async-test-util": "1.2.1",
    "babel-cli": "6.26.0",
    "babel-core": "6.26.0",
    "babel-eslint": "8.1.2",
    "babel-loader": "7.1.2",
    "babel-plugin-transform-async-to-generator": "6.24.1",
    "babel-plugin-transform-class-properties": "6.24.1",
    "babel-plugin-transform-es2015-block-scoping": "6.26.0",
    "babel-plugin-transform-es2015-constants": "6.1.4",
    "babel-plugin-transform-es3-member-expression-literals": "6.22.0",
    "babel-plugin-transform-es3-property-literals": "6.22.0",
    "babel-plugin-transform-object-rest-spread": "6.26.0",
    "babel-plugin-transform-regenerator": "6.26.0",
    "babel-plugin-transform-runtime": "6.23.0",
    "babel-polyfill": "6.26.0",
    "babel-preset-es2015": "6.24.1",
    "babel-preset-es2015-native-modules": "6.9.4",
    "babel-preset-es2016": "6.24.1",
    "babel-preset-es2017": "6.24.1",
    "babel-preset-latest": "6.24.1",
    "brfs": "1.4.3",
    "browserify": "14.5.0",
    "check-node-version": "3.1.1",
    "child-process-promise": "2.2.1",
    "concurrently": "3.5.1",
    "cross-env": "5.1.3",
    "delete": "1.1.0",
    "dependency-check": "2.9.2",
    "detect-browser": "2.0.0",
    "disc": "1.3.3",
    "eslint": "4.14.0",
    "eslint-plugin-babel": "4.1.2",
    "eslint-plugin-disable": "1.0.0",
    "eslint-plugin-spellcheck": "0.0.8",
    "exists-file": "3.0.2",
    "express": "4.16.2",
    "express-pouchdb": "2.3.7",
    "faker": "4.1.0",
    "gitbook-cli": "2.3.2",
    "gulp": "3.9.1",
    "gulp-mocha": "5.0.0",
    "gzip-size-cli": "2.1.0",
    "http-server": "0.10.0",
    "karma": "2.0.0",
    "karma-babel-preprocessor": "7.0.0",
    "karma-browserify": "5.1.2",
    "karma-chrome-launcher": "2.2.0",
    "karma-coverage": "1.1.1",
    "karma-detect-browsers": "2.2.6",
    "karma-edge-launcher": "0.4.2",
    "karma-firefox-launcher": "1.1.0",
    "karma-ie-launcher": "1.0.0",
    "karma-mocha": "1.3.0",
    "karma-opera-launcher": "1.0.0",
    "karma-safari-launcher": "1.0.0",
    "leveldown": "2.1.1",
    "memdown": "1.4.1",
    "mocha": "4.1.0",
    "nconf": "0.10.0",
    "pouchdb": "6.4.1",
    "pouchdb-adapter-http": "6.4.1",
    "pouchdb-adapter-idb": "6.4.1",
    "pouchdb-adapter-leveldb": "6.4.1",
    "pouchdb-adapter-localstorage": "6.4.1",
    "pouchdb-adapter-memory": "6.4.1",
    "pouchdb-adapter-node-websql": "6.4.1",
    "pouchdb-adapter-websql": "6.4.1",
    "pre-commit": "1.2.2",
    "random-int": "1.0.0",
    "request": "2.83.0",
    "request-promise": "4.2.2",
    "request-promise-native": "1.0.5",
    "rimraf": "2.6.2",
    "rxjs": "5.5.6",
    "shelljs": "0.7.8",
    "ts-node": "4.1.0",
    "typescript": "2.6.2",
    "uglify-js": "3.3.4",
    "walk-sync": "0.3.2",
    "watch": "1.0.2",
    "watchify": "3.9.0",
    "webpack": "3.10.0"
  },
  "homepage": "https://pubkey.github.io/rxdb/",
  "jsnext:main": "./dist/es/index.js",
  "keywords": [
    "database",
    "db",
    "encryption",
    "indexeddb",
    "leveldown",
    "localstorage",
    "nosql",
    "offline-first",
    "pouchdb",
    "reactive",
    "replication",
    "rxjs",
    "schema"
  ],
  "license": "Apache-2.0",
  "main": "./dist/lib/index.js",
  "module": "./dist/es/index.js",
  "name": "rxdb",
  "optionalDependencies": {},
  "peerDependencies": {
    "rxjs": "^5.5.2"
  },
  "pre-commit": [
    "lint"
  ],
  "readme": "\n\n<!--\n| Announcement                                                        |\n| :--: |\n| &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; Version **6.0.0** is now released, read the [CHANGELOG](./CHANGELOG.md#600-september-19-2017) &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; |\n-->\n\n<h1 align=\"center\">RxDB</h1>\n\n<p align=\"center\">\n  <a href=\"https://github.com/pubkey/rxdb\">\n    <img src=\"https://cdn.rawgit.com/pubkey/rxdb/ba7c9b80/docs/files/logo/logo_text.svg\" width=\"380px\" />\n  </a>\n</p>\n\n<p align=\"center\">\n  <strong>A reactive, offline-first Database for JavaScript</strong>\n</p>\n\n<div align=\"center\">\n  <h3>\n    <a href=\"https://pubkey.github.io/rxdb/\">Documentation</a>\n    <span> | </span>\n    <a href=\"https://github.com/pubkey/rxdb/tree/master/examples\">Code Examples</a>\n    <span> | </span>\n    <a href=\"https://www.webpackbin.com/bins/-Kv9UWdorylh0jzGYmZy\">Live Demo</a>\n  </h3>\n</div>\n\n<p align=\"center\">\n  <a href=\"https://gitter.im/pubkey/rxdb\">\n    <img src=\"https://cdn.rawgit.com/pubkey/rxdb/master/docs-src/files/gitter.svg\" />\n  </a>\n  <a href=\"https://twitter.com/rxdbjs\">\n    <img src=\"https://cdn.rawgit.com/pubkey/rxdb/4e7dd18f/docs/files/twitter_follow.png\" width=\"111px\" />\n  </a>\n<!--  <a href=\"https://www.patreon.com/rxdb\">\n    <img src=\"https://cdn.rawgit.com/pubkey/rxdb/4e7dd18f/docs/files/icons/patreon.png\" width=\"111px\" />\n  </a> -->\n</p>\n\n\n<br/>\n\n---\n\n\n\n## Features\n\n* **Multiplatform support** for browsers, nodejs, electron, cordova, react-native and every other javascript-runtime\n* **Reactive** data-handling based on [rxjs](https://github.com/ReactiveX/rxjs)\n* **Replication** between client and server-data, compatible with ![pouchdb](docs-src/files/icons/pouchdb.png)PouchDB, ![couchdb](docs-src/files/icons/couchdb.png)CouchDB and ![cloudant](docs-src/files/icons/cloudant.png)IBM Cloudant\n* **Schema-based** with the easy-to-learn standard of [jsonschema](http://json-schema.org/)\n* **Mango-Query** exactly like you know from mongoDB and mongoose\n* **Encryption** of single data-fields to protect your users data\n* **Import/Export** of the database-state (json), awesome for coding with [TDD](https://en.wikipedia.org/wiki/Test-driven_development)\n* **Multi-Window** to synchronise data between different browser-windows or nodejs-processes\n* **ORM-capabilities** to easily handle data-code-relations\n\n## Platform-support\nRxDB is made so that you can use **exactly the same code** at\n- ![Chrome](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/chrome/chrome_24x24.png)\n![Firefox](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/firefox/firefox_24x24.png)\n![Safari](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/safari/safari_24x24.png)\n![Edge](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/edge/edge_24x24.png)\n![Internet Explorer 11](https://cdnjs.cloudflare.com/ajax/libs/browser-logos/39.2.2/archive/internet-explorer_9-11/internet-explorer_9-11_24x24.png) browsers\n- ![NodeJS](docs-src/files/icons/nodejs.png) NodeJS\n- ![electron](docs-src/files/icons/electron.png) Electron\n- ![react-native](docs-src/files/icons/react-native.png) React-Native\n- ![cordova](docs-src/files/icons/cordova.png) Cordova/Phonegap\n- ![nativescript](docs-src/files/icons/nativescript.png) Nativescript\n\nWe optimized, double-checked and made boilerplates so you can directly start to use RxDB with frameworks like\n\n- ![react](docs-src/files/icons/react.png) react\n- ![angular](docs-src/files/icons/angular.png) angular/ng2\n- ![ionic](docs-src/files/icons/ionic.png) ionic2\n- ![vuejs](docs-src/files/icons/vuejs.png) vuejs\n\n\n## Quickstart\n\n### Installation:\n\n```sh\nnpm install rxdb --save\n\n# peerDependencies\nnpm install rxjs babel-polyfill --save\n```\n\n### Import:\n\n<details>\n  <summary>ES7</summary>\n\n```javascript\nimport 'babel-polyfill'; // only needed when you dont have polyfills\nimport RxDB from 'rxdb';\nconst db = await RxDB.create({\n    name: 'heroesdb',\n    adapter: 'websql',\n    password: 'myLongAndStupidPassword', // optional\n    multiInstance: true                  // default: true\n  });                                                       // create database\n\nawait db.collection({name: 'heroes', schema: mySchema});    // create collection\ndb.heroes.insert({ name: 'Bob' });                          // insert document\n```\n</details>\n\n<details>\n  <summary>ES5</summary>\n\n```javascript\nrequire('babel-polyfill'); // only needed when you dont have polyfills\nvar RxDB = require('rxdb');\nRxDB.create({\n    name: 'heroesdb',\n    adapter: 'websql',\n    password: 'myLongAndStupidPassword', // optional\n    multiInstance: true                  // default: true\n  })                                                                              // create database\n  .then(function(db) {return db.collection({name: 'heroes', schema: mySchema});}) // create collection\n  .then(function(collection) {collection.insert({name: 'Bob'});})                 // insert document\n```\n</details>\n\n## Feature-Showroom (click to toggle)\n\n<details>\n<summary>\n  <b>Mango-Query</b>\n  <p>\n\nTo find data in your collection, [use the mquery api](https://github.com/aheckmann/mquery) to create chained mango-queries, which you maybe know from **mongoDB** or **mongoose**.\n  </p>\n</summary>\n\n```javascript\nmyCollection\n  .find()\n  .where('name').ne('Alice')\n  .where('age').gt(18).lt(67)\n  .limit(10)\n  .sort('-age')\n  .exec().then( docs => {\n    console.dir(docs);\n  });\n```\n</details>\n\n<details>\n<summary>\n  <b>Reactive</b>\n  <p>\n\nRxDB implements [rxjs](https://github.com/ReactiveX/rxjs) to make your data reactive.\nThis makes it easy to always show the real-time database-state in the dom without manually re-submitting your queries.</p>\n</summary>\n\n```javascript\ndb.heroes\n  .find()\n  .sort('name')\n  .$ // <- returns observable of query\n  .subscribe( docs => {\n    myDomElement.innerHTML = docs\n      .map(doc => '<li>' + doc.name + '</li>')\n      .join();\n  });\n```\n![reactive.gif](docs-src/files/reactive.gif)\n</details>\n\n<details>\n<summary>\n  <b>MultiWindow/Tab</b>\n  <p>\n\nWhen two instances of RxDB use the same storage-engine, their state and action-stream will be broadcasted.\nThis means with two browser-windows the change of window #1 will automatically affect window #2. This works completely offline.\n</p>\n</summary>\n\n![multiwindow.gif](docs-src/files/multiwindow.gif)\n</details>\n\n<details>\n<summary>\n  <b>Replication</b>\n  <p>\n\nBecause RxDB relies on glorious [PouchDB](https://github.com/pouchdb/pouchdb), it is easy to replicate\nthe data between devices and servers. And yes, the changeEvents are also synced.</p>\n</summary>\n\n![sync.gif](docs-src/files/sync.gif)\n</details>\n\n<details>\n<summary>\n  <b>Schema</b>\n  <p>\n\nSchemas are defined via [jsonschema](http://json-schema.org/) and are used to describe your data.</p>\n</summary>\n\n```javascript\nconst mySchema = {\n    title: \"hero schema\",\n    version: 0,                 // <- incremental version-number\n    description: \"describes a simple hero\",\n    type: \"object\",\n    properties: {\n        name: {\n            type: \"string\",\n            primary: true       // <- this means: unique, required, string and will be used as '_id'\n        },\n        secret: {\n            type: \"string\",\n            encrypted: true     // <- this means that the value of this field is stored encrypted\n        },\n        skills: {\n            type: \"array\",\n            maxItems: 5,\n            uniqueItems: true,\n            item: {\n                type: \"object\",\n                properties: {\n                    name: {\n                        type: \"string\"\n                    },\n                    damage: {\n                        type: \"number\"\n                    }\n                }\n            }\n        }\n    },\n    required: [\"color\"]\n};\n```\n</details>\n\n<details>\n<summary>\n  <b>Encryption</b>\n  <p>\n\nBy setting a schema-field to `encrypted: true`, the value of this field will be stored in encryption-mode and can't be read without the password. Of course you can also encrypt nested objects. Example:</p>\n</summary>\n\n```json\n\"secret\": {\n  \"type\": \"string\",\n  \"encrypted\": true\n}\n```\n</details>\n\n\n<details>\n<summary>\n  <b>Level-adapters</b>\n  <p>\n\nThe underlying pouchdb can use different <a href=\"https://pouchdb.com/adapters.html\">adapters</a> as storage engine. So you can use RxDB in different environments by just switching the adapter.\nFor example you can use websql in the browser, localstorage in mobile-browsers and a leveldown-adapter in nodejs.</p>\n</summary>\n\n```js\n// this requires the localstorage-adapter\nRxDB.plugin(require('pouchdb-adapter-localstorage'));\n// this creates a database with the localstorage-adapter\nconst db = await RxDB.create('heroesDB', 'localstorage');\n```\n\nSome adapters you can use:\n- [indexedDB](https://www.npmjs.com/package/pouchdb-adapter-idb)\n- [localstorage](https://www.npmjs.com/package/pouchdb-adapter-localstorage)\n- [fruitdown](https://www.npmjs.com/package/pouchdb-adapter-fruitdown)\n- [memory](https://www.npmjs.com/package/pouchdb-adapter-memory)\n- [websql](https://www.npmjs.com/package/pouchdb-adapter-websql)\n- [Or any leveldown-adapter](https://github.com/Level/levelup/wiki/Modules#storage-back-ends)\n</details>\n\n<details>\n<summary>\n  <b>Import / Export</b>\n  <p>\n\nRxDB lets you import and export the whole database or single collections into json-objects. This is helpful to trace bugs in your application or to move to a given state in your tests.</p>\n</summary>\n\n```js\n\n// export a single collection\nconst jsonCol = await myCollection.dump();\n\n// export the whole database\nconst jsonDB = await myDatabase.dump();\n\n// import the dump to the collection\nawait emptyCollection.importDump(json);\n\n\n// import the dump to the database\nawait emptyDatabase.importDump(json);\n```\n</details>\n\n<details>\n<summary>\n  <b>Leader-Election</b>\n  <p>\n\nImagine your website needs to get a piece of data from the server once every minute. To accomplish this task\nyou create a websocket or pull-interval. If your user now opens the site in 5 tabs parallel, it will run the interval\nor create the socket 5 times. This is a waste of resources which can be solved by RxDB's LeaderElection.</p>\n</summary>\n\n```js\nmyRxDatabase.waitForLeadership()\n  .then(() => {\n      // this will only run when the instance becomes leader.\n      mySocket = createWebSocket();\n  });\n```\n\nIn this example the leader is marked with the crown &#9819;\n\n![reactive.gif](docs-src/files/leader-election.gif)\n</details>\n\n<details>\n<summary>\n  <b>Key-Compression</b>\n  <p>\n\nDepending on which adapter and in which environment you use RxDB, client-side storage is [limited](https://pouchdb.com/2014/10/26/10-things-i-learned-from-reading-and-writing-the-pouchdb-source.html) in some way or the other. To save disc-space, RxDB has an internal schema-based key-compression to minimize the size of saved documents.</p>\n</summary>\n\nExample:\n```js\n\n// when you save an object with big keys\nawait myCollection.insert({\n  firstName: 'foo'\n  lastName:  'bar'\n  stupidLongKey: 5\n});\n\n// RxDB will internally transform it to\n{\n  '|a': 'foo'\n  '|b':  'bar'\n  '|c': 5\n}\n\n// so instead of 46 chars, the compressed-version has only 28\n// the compression works internally, so you can of course still access values via the original key.names\nconsole.log(myDoc.firstName);\n// 'foo'\n```\n</details>\n\n\n<details>\n<summary>\n  <b>QueryChangeDetection</b>\n  <p>\n    Similar to Meteors <a href=\"https://github.com/meteor/docs/blob/version-NEXT/long-form/oplog-observe-driver.md\">oplog-observe-driver</a>,\n    RxDB has a QueryChangeDetection to optimize observed or reused queries. This makes sure that when you update/insert/remove documents,\n    the query does not have to re-run over the whole database but the new results will be calculated from the events. This creates a huge performance-gain\n    with zero cost. The QueryChangeDetection works internally and is currently in <b>beta</b> (disabled by default).\n  </p>\n</summary>\n\n### Use-Case-Example\nImagine you have a very big collection with many user-documents. At your page you want to display a toplist with users which have the most `points` and are currently logged in.\nYou create a query and subscribe to it.\n\n```js\nconst query = usersCollection.find().where('loggedIn').eq(true).sort('points');\nquery.$.subscribe(users => {\n    document.querySelector('body').innerHTML = users\n        .reduce((prev, cur) => prev + cur.username+ '<br/>', '');\n});\n```\n\nAs you may detect, the query can take very long time to run, because you have thousands of users in the collection.\nWhen a user now logs off, the whole query will re-run over the database which takes again very long.\n\n```js\nanyUser.loggedIn = false;\nawait anyUser.save();\n```\n\nBut not with the QueryChangeDetection enabled.\nNow, when one user logs off, it will calculate the new results from the current results plus the RxChangeEvent. This often can be done in-memory without making IO-requests to the storage-engine. The QueryChangeDetection not only works on subscribed queries, but also when you do multiple `.exec()`'s on the same query.\n\n</details>\n\n## Browser support\n\nAll major evergreen browsers and IE11 are supported. Tests automatically run against Firefox and Chrome, and manually in a VirtualBox for IE11 and Edge.\n\nAs RxDB heavily relies on PouchDB, see [their browser support](https://pouchdb.com/learn.html#browser_support) for more information. Also do keep in mind that different browsers have different storage limits, especially on mobile devices.\n\n## Getting started\n\nGet started now by [reading the docs](https://pubkey.github.io/rxdb/) or exploring the [example-projects](./examples).\n\nYou can test out RxDB in the browser with [WebpackBin](https://www.webpackbin.com/bins/-Kl_UJwIRc7wysOY96PZ).\n\n## Contribute\n[Check out how you can contribute to this project](./docs-src/contribute.md).\n\n## Follow up\n- Follow RxDB on [twitter](https://twitter.com/rxdbjs) to not miss the latest enhancements.\n- Join the chat on [gitter](https://gitter.im/pubkey/rxdb) for discussion.\n\n# Thank you\nA big **Thank you** to every [supporter](https://github.com/pubkey/rxdb/blob/master/SUPPORTER.md) and every [contributor](https://github.com/pubkey/rxdb/graphs/contributors) of this project.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pubkey/rxdb.git"
  },
  "scripts": {
    "build": "npm run clear && npm run transpile && npm run build:es && browserify dist/lib/browserify.index.js > dist/rxdb.browserify.js && uglifyjs --compress --mangle --output dist/rxdb.browserify.min.js -- dist/rxdb.browserify.js",
    "build:es": "rimraf -rf dist/es && cross-env NODE_ENV=es6 babel src --out-dir dist/es",
    "build:min": "npm run transpile && browserify dist/lib/browserify.index.js > dist/rxdb.browserify.js && uglifyjs --compress --mangle --output dist/rxdb.browserify.min.js -- dist/rxdb.browserify.js",
    "build:size": "echo \"Build-Size (minified+gzip):\" && gzip-size --raw ./dist/rxdb.browserify.min.js",
    "clear": "rimraf -rf test_tmp/ && rimraf -rf dist/ && rimraf .transpile_state.json",
    "dev": "watch 'npm run test:node' src/ test/",
    "dev:example": "watch 'npm run transpile:src && echo \"done\"' src/ test/",
    "disc": "npm run transpile && browserify dist/lib/index.js --full-paths | uglifyjs --compress --mangle | discify --open --full-paths",
    "dockertest": "docker run -it -v $(pwd):/usr/src/app markadams/chromium-xvfb-js:latest-onbuild",
    "docs:build": "gitbook install docs-src && gitbook build docs-src docs && cp docs-src/files/logo/icon.png docs/gitbook/images/apple-touch-icon-precomposed-152.png && cp docs-src/files/logo/icon.ico docs/gitbook/images/favicon.ico && npm run docs:copy",
    "docs:copy": "cp -r docs-src/files docs/files",
    "docs:install": "gitbook install docs-src",
    "docs:serve": "gitbook serve docs-src",
    "lint": "eslint --ignore-path ./config/.eslintignore src test ./config/gulpfile.js",
    "pretest": "npm run transpile",
    "pretranspile": "check-node-version --node \">= 7.0.0\"",
    "preversion": "npm run lint && npm run test",
    "test": "gulp --gulpfile ./config/gulpfile.js test && karma start ./config/karma.conf.js",
    "test:browser": "npm run pretest && karma start ./config/karma.conf.js --single-run",
    "test:core": "npm run pretest && mocha ./test_tmp/unit/core.node.js",
    "test:deps": "dependency-check ./package.json --no-dev",
    "test:node": "npm run pretest && gulp --gulpfile ./config/gulpfile.js test",
    "test:typings": "npm run pretest && gulp --gulpfile ./config/gulpfile.js test:typings",
    "transpile": "node scripts/transpile.js",
    "transpile:clean": "rimraf dist/lib"
  },
  "types": "./src/typings/index.d.ts",
  "version": "7.3.1"
}
